// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	app "github.com/YuriyNazarov/bannersRotator/internal/app"
	mock "github.com/stretchr/testify/mock"
)

// StatsRepository is an autogenerated mock type for the StatsRepository type
type StatsRepository struct {
	mock.Mock
}

// Click provides a mock function with given fields: bannerID, slotID, groupID
func (_m *StatsRepository) Click(bannerID int, slotID int, groupID int) error {
	ret := _m.Called(bannerID, slotID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(bannerID, slotID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStats provides a mock function with given fields: slotID, groupID
func (_m *StatsRepository) GetStats(slotID int, groupID int) ([]app.BannerStat, error) {
	ret := _m.Called(slotID, groupID)

	var r0 []app.BannerStat
	if rf, ok := ret.Get(0).(func(int, int) []app.BannerStat); ok {
		r0 = rf(slotID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]app.BannerStat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(slotID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: bannerID, slotID, groupID
func (_m *StatsRepository) Show(bannerID int, slotID int, groupID int) error {
	ret := _m.Called(bannerID, slotID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(bannerID, slotID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
